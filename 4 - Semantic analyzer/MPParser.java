
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Dec 23 11:27:01 CET 2022
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import SymbolTable.*;

/** CUP v0.10k generated parser.
  * @version Fri Dec 23 11:27:01 CET 2022
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\003\006\000\002\004" +
    "\006\000\002\005\004\000\002\005\002\000\002\007\005" +
    "\000\002\020\003\000\002\020\005\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\006\004\000\002" +
    "\006\003\000\002\010\003\000\002\010\006\000\002\010" +
    "\003\000\002\011\011\000\002\017\004\000\002\017\003" +
    "\000\002\016\006\000\002\013\005\000\002\013\003\000" +
    "\002\012\003\000\002\012\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\005\000\002\021\003\000\002\021" +
    "\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\004\004\005\001\002\000\004\002\071\001" +
    "\002\000\004\005\006\001\002\000\004\006\007\001\002" +
    "\000\004\007\010\001\002\000\016\007\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\024\ufffd\001\002\000\004\002\000" +
    "\001\002\000\016\007\010\012\023\013\014\014\024\015" +
    "\025\024\021\001\002\000\004\024\064\001\002\000\004" +
    "\024\ufff9\001\002\000\014\007\ufff2\010\ufff2\012\ufff2\020" +
    "\ufff2\024\ufff2\001\002\000\012\007\010\010\062\012\023" +
    "\024\021\001\002\000\016\007\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\024\ufffe\001\002\000\012\007\ufff5\010\ufff5" +
    "\012\ufff5\024\ufff5\001\002\000\004\017\057\001\002\000" +
    "\014\007\ufff4\010\ufff4\012\ufff4\020\ufff4\024\ufff4\001\002" +
    "\000\004\005\026\001\002\000\004\024\ufff8\001\002\000" +
    "\004\024\ufff7\001\002\000\014\005\034\024\027\025\030" +
    "\026\035\027\036\001\002\000\012\006\uffe9\011\uffe9\022" +
    "\uffe9\023\uffe9\001\002\000\014\006\uffe6\011\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\001\002\000\012\006\uffec\011\uffec\022" +
    "\uffec\023\uffec\001\002\000\010\006\045\022\042\023\043" +
    "\001\002\000\012\006\uffe8\011\uffe8\022\uffe8\023\uffe8\001" +
    "\002\000\014\005\034\024\027\025\030\026\035\027\036" +
    "\001\002\000\014\006\uffe5\011\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\001\002\000\014\006\uffe4\011\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\001\002\000\010\006\040\022\042\023\043\001" +
    "\002\000\012\006\uffe7\011\uffe7\022\uffe7\023\uffe7\001\002" +
    "\000\014\005\034\024\027\025\030\026\035\027\036\001" +
    "\002\000\014\005\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\001\002\000\014\005\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\001\002\000\012\006\uffed\011\uffed\022\uffed\023\uffed" +
    "\001\002\000\004\007\046\001\002\000\004\020\051\001" +
    "\002\000\006\010\uffef\020\uffef\001\002\000\006\010\055" +
    "\020\051\001\002\000\010\025\030\026\035\027\036\001" +
    "\002\000\004\021\053\001\002\000\010\007\010\012\023" +
    "\024\021\001\002\000\006\010\uffee\020\uffee\001\002\000" +
    "\014\007\ufff1\010\ufff1\012\ufff1\020\ufff1\024\ufff1\001\002" +
    "\000\006\010\ufff0\020\ufff0\001\002\000\014\005\034\024" +
    "\027\025\030\026\035\027\036\001\002\000\010\011\061" +
    "\022\042\023\043\001\002\000\014\007\ufff3\010\ufff3\012" +
    "\ufff3\020\ufff3\024\ufff3\001\002\000\016\002\uffff\007\uffff" +
    "\010\uffff\012\uffff\020\uffff\024\uffff\001\002\000\012\007" +
    "\ufff6\010\ufff6\012\ufff6\024\ufff6\001\002\000\006\011\ufffb" +
    "\016\ufffb\001\002\000\006\011\067\016\066\001\002\000" +
    "\004\024\070\001\002\000\016\007\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\024\ufffc\001\002\000\006\011\ufffa\016" +
    "\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\010\001\001" +
    "\000\004\005\011\001\001\000\002\001\001\000\016\004" +
    "\014\006\015\007\016\010\017\011\021\015\012\001\001" +
    "\000\004\020\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\014\010\062\011\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\031\014\030\021\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\040" +
    "\001\001\000\002\001\001\000\010\013\036\014\030\021" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\040\001\001\000\002\001\001\000\006\014\043\021" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\046\017\047\001" +
    "\001\000\002\001\001\000\004\016\055\001\001\000\004" +
    "\021\051\001\001\000\002\001\001\000\010\004\014\010" +
    "\053\011\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\057\014\030\021\032\001" +
    "\001\000\004\012\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	symbolTable = new SymbolTable();

    }



   public int errNo = 0;
   public int warnNo = 0;
   
   SymbolTable symbolTable;

   public static void main( String[] args ) {
      try {
		   FileReader file = new FileReader(args[0]);
		    java_cup.runtime.Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
		   parser.checkWarnings();
		   if ( parser.errNo == 0 && parser.warnNo == 0 )
            System.out.println("Syntax analysis done.");
         else
            System.out.println("Syntax analysis done.\n"
            + "Number of errors: "
            + parser.errNo
            + "\nnumber of warnings: "
            + parser.warnNo + "\n");
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }
      public void checkWarnings()
   {
      SymbolNode current = symbolTable.getVariables();
      while ( current != null )
      {
      	Variable var = ( Variable ) current;
      	if ( var.last_def == -1 && var.last_use == -1 )
      	{
      		System.out.println("Upozorenje: Promenljiva " + var.name + 
      			" je deklarisana, ali se nigde ne koristi.");
      		warnNo++;
      	}
      	else if ( var.last_def > var.last_use )
      	{
      		System.out.println("Upozorenje: Vrednost dodeljena promeljivoj " +
      		    var.name + " u liniji " + var.last_def + " se nigde ne koristi.");
      		warnNo++;
      	}
      	current = current.next;
     }
   }

 	public int getLine()
 	{
 		return (( MPLexer) getScanner()).getLine();
 	}

	public int getLevel()
	{
		return (( MPLexer) getScanner()).getLevel();
	}

	public void incrementLevel() {
		(( MPLexer) getScanner()).incrementLevel();
	}

   public void decrementLevel() {
		(( MPLexer) getScanner()).decrementLevel();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Constant ::= FLOATCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Float c = (Float)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
      RESULT = new Constant(parser.symbolTable.getType("float"), c ); 
   
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Constant*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Constant ::= CHARCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
      RESULT = new Constant(parser.symbolTable.getType("char"), c ); 
   
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Constant*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Constant ::= INTCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
      RESULT = new Constant(parser.symbolTable.getType("int"), c ); 
   
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Constant*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Term ::= LEFTPAR Expression RIGHTPAR 
            {
              Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
      RESULT = i;

      System.out.println("Term -> ( Expression )");
   
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Term ::= Constant 
            {
              Type RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Constant k = (Constant)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
      RESULT = k.type;

      System.out.println("Term -> Constant");
   
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Term ::= ID 
            {
              Type RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
      Variable var = parser.symbolTable.getVar(ime);
      if ( var == null ) {
         System.out.println("******************************************************************************************************************");
         System.out.println("Greska u liniji " + parser.getLine() + ": promenljiva " + ime + " nije deklarisana.");
         System.out.println("******************************************************************************************************************");
         RESULT = parser.symbolTable.getType("unknown");
         parser.errNo++;
      }
      else {
         RESULT = var.type;
         if ( var.last_def == -1 ) {
            System.out.println("******************************************************************************************************************");
            System.out.println("Greska u liniji " + parser.getLine() + ": promenljiva " + ime + " nije inicijalizovana.");
            System.out.println("******************************************************************************************************************");
            
            parser.errNo++;
         }
         var.last_use = parser.getLine();
      }

      System.out.println("Term -> ID");
   
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AddOperator ::= MINUS 
            {
              Object RESULT = null;
		
      System.out.println("AddOperator -> -");
   
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*AddOperator*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AddOperator ::= PLUS 
            {
              Object RESULT = null;
		
      System.out.println("AddOperator -> +");
   
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*AddOperator*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expression ::= Term 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
      RESULT = t;
      System.out.println("Expression -> Term");
   
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expression ::= Expression AddOperator Term 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
      if (i1.tkind == Type.FLOAT || i2.tkind == Type.FLOAT) {
         RESULT = parser.symbolTable.getType("float");
      }
      else if (i1.tkind == Type.INT || i2.tkind == Type.INT) {
         RESULT = parser.symbolTable.getType("int");
      }
      else {
         RESULT = parser.symbolTable.getType("char");
      }

      System.out.println("Expression -> Expression AddOperator Term");
   
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // WhenStatement ::= WHEN Constant COLON Statement 
            {
              Type RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
      RESULT = c.type;
      System.out.println("WhenStatement -> when Constant : Statement");
   
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*WhenStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // WhenStatementList ::= WhenStatement 
            {
              Type RESULT = null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type ws = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
      RESULT = ws;
      System.out.println("WhenStatementList -> WhenStatement");
   
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*WhenStatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // WhenStatementList ::= WhenStatementList WhenStatement 
            {
              Type RESULT = null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type ws = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
      RESULT = ws;
      System.out.println("WhenStatementList -> WhenStatementList WhenStatement");
   
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*WhenStatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CaseStatement ::= CASE LEFTPAR Expression RIGHTPAR LEFTBRACKET WhenStatementList RIGHTBRACKET 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).value;
		int wslleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int wslright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type wsl = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
      if (!(t.tkind == Type.INT || t.tkind == Type.CHAR)) {
         System.out.println("******************************************************************************************************************");
         System.out.println("Greska u liniji " + parser.getLine() 
         + ": Izraz u case naredbi moze samo biti tipa int ili tipa char.");
         System.out.println("******************************************************************************************************************");
         
         parser.errNo++;
      }

      if (t.tkind != wsl.tkind) {
         System.out.println("******************************************************************************************************************");
         System.out.println("Greska u liniji " + parser.getLine() 
         + ": Konstanta u when naredbi mora biti istog tipa kao izraz u odgovarajucoj case naredbi");
         System.out.println("******************************************************************************************************************");

         parser.errNo++;
      }

      System.out.println("CaseStatement -> case ( Expression ) { WhenStatementList }");
   
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*CaseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= Block 
            {
              Object RESULT = null;
		
         System.out.println("Statement -> Block");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type expr = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
         Variable var = parser.symbolTable.getVar(id);
			if (var == null) {
            System.out.println("******************************************************************************************************************");
				System.out.println("Greska u liniji " + parser.getLine() + ": promenljiva " + id + " nije deklarisana.");
            System.out.println("******************************************************************************************************************");
				
            parser.errNo++;
			}
         else {
            // float > int > char
            if (var.type.tkind == Type.CHAR && (expr.type.tkind != Type.CHAR)) {
               System.out.println("******************************************************************************************************************");
               System.out.println("Greska u liniji " + parser.getLine() + ": " + "Promenljivoj char tipa se moze dodeliti samo promenljiva char tipa");
               System.out.println("******************************************************************************************************************");
               
               parser.errNo++; 
            }
            else if (var.type.tkind == Type.INT && (expr.type.tkind == Type.FLOAT)) {
               System.out.println("******************************************************************************************************************");
               System.out.println("Greska u liniji " + parser.getLine() + ": " + "Ne moze se float dodeliti promenljivoj int tipa");
               System.out.println("******************************************************************************************************************");
         
               parser.errNo++; 
            }
            
            System.out.println("Statement -> ID = Expression ;");
         }

      
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= CaseStatement 
            {
              Object RESULT = null;
		
         System.out.println("Statement -> CaseStatement");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StatementList ::= Statement 
            {
              Object RESULT = null;
		
         System.out.println("StatementList -> Statement");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;
		
         System.out.println("StatementList -> StatementList Statement");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= FLOAT 
            {
              Type RESULT = null;
		
         RESULT = parser.symbolTable.getType("float");
         System.out.println("Type -> float");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= CHAR 
            {
              Type RESULT = null;
		
         RESULT = parser.symbolTable.getType("char");
         System.out.println("Type -> char");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              Type RESULT = null;
		
         RESULT = parser.symbolTable.getType("int");
         System.out.println("Type -> int");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NameList ::= NameList COMMA ID 
            {
              ArrayList RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            RESULT = niz;
            RESULT.add(ime);
            System.out.println("NameList -> NameList , ID");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NameList ::= ID 
            {
              ArrayList RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            RESULT = new ArrayList();
            RESULT.add(ime);
            System.out.println("NameList -> ID");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecl ::= Type NameList SEMICOLON 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
               for ( int i = 0; i < niz.size(); i++ ) {
                  String ime = (String) niz.get(i);
                  if ( ! parser.symbolTable.addVar(ime, parser.getLevel(), t) ) {
                     System.out.println("******************************************************************************************************************");
                     System.out.println("Greska u liniji " + parser.getLine() + ": " +
                     "Promenljiva " + ime + " je vec deklarisana u toj ili nekoj od spoljasnjih oblasti vazenja.");
                     System.out.println("******************************************************************************************************************");
                     
                     parser.errNo++;
                  }
               } 

               System.out.println("VarDecl -> Type NameList ;");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declarations ::= 
            {
              Object RESULT = null;
		
               parser.incrementLevel();
               System.out.println("Declarations -> e");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declarations ::= Declarations VarDecl 
            {
              Object RESULT = null;
		
               System.out.println("Declarations -> Declarations VarDecl");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= LEFTBRACKET Declarations StatementList RIGHTBRACKET 
            {
              Object RESULT = null;
		
			   parser.symbolTable.removeVarsByLevel(parser.getLevel());
           	parser.decrementLevel();
            System.out.println("Block -> { Declarations StatementList }");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= MAIN LEFTPAR RIGHTPAR Block 
            {
              Object RESULT = null;
		
            System.out.println("Program -> main ( ) Block");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

