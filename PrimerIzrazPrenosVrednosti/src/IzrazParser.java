
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Dec 09 01:00:34 CET 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Thu Dec 09 01:00:34 CET 2021
  */
public class IzrazParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public IzrazParser() {super();}

  /** Constructor which sets the default scanner. */
  public IzrazParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\004\000\002\003\005\000\002\002\004\000\002\003" +
    "\005\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\010\000\004\004\004\001\002\000\010\002\ufffe\005" +
    "\ufffe\006\ufffe\001\002\000\010\002\010\005\006\006\007" +
    "\001\002\000\004\004\004\001\002\000\004\004\004\001" +
    "\002\000\004\002\000\001\002\000\010\002\uffff\005\uffff" +
    "\006\uffff\001\002\000\010\002\001\005\001\006\007\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\010\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\011\001\001\000\004\003\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$IzrazParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$IzrazParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$IzrazParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new IzrazLexer( file );
		   IzrazParser parser = new IzrazParser( scanner );
		   Symbol syntax_tree = parser.parse();
           System.out.println(syntax_tree.value);
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$IzrazParser$actions {
  private final IzrazParser parser;

  /** Constructor */
  CUP$IzrazParser$actions(IzrazParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$IzrazParser$do_action(
    int                        CUP$IzrazParser$act_num,
    java_cup.runtime.lr_parser CUP$IzrazParser$parser,
    java.util.Stack            CUP$IzrazParser$stack,
    int                        CUP$IzrazParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$IzrazParser$result;

      /* select the action based on the action number */
      switch (CUP$IzrazParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Izraz ::= CONST 
            {
              Integer RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-0)).value;
		 
           System.out.println("Prepoznata konstanta: " + c); 
           RESULT = c;
		
              CUP$IzrazParser$result = new java_cup.runtime.Symbol(1/*Izraz*/, ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-0)).right, RESULT);
            }
          return CUP$IzrazParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Izraz ::= Izraz PUTA Izraz 
            {
              Integer RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-2)).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-0)).right;
		Integer i2 = (Integer)((java_cup.runtime.Symbol) CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-0)).value;
		 
           System.out.println("Prepoznat proizvod: " + i1 + " * " + i2);
           RESULT = new Integer(i1.intValue() * i2.intValue()); 
        
              CUP$IzrazParser$result = new java_cup.runtime.Symbol(1/*Izraz*/, ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-0)).right, RESULT);
            }
          return CUP$IzrazParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Izraz EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-1)).right;
		Integer start_val = (Integer)((java_cup.runtime.Symbol) CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-1)).value;
		RESULT = start_val;
              CUP$IzrazParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$IzrazParser$parser.done_parsing();
          return CUP$IzrazParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Izraz ::= Izraz PLUS Izraz 
            {
              Integer RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-2)).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-0)).right;
		Integer i2 = (Integer)((java_cup.runtime.Symbol) CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-0)).value;
		 
           System.out.println("Prepoznat zbir: "  + i1 + " + " + i2);
           RESULT = new Integer(i1.intValue() + i2.intValue()); 
       
              CUP$IzrazParser$result = new java_cup.runtime.Symbol(1/*Izraz*/, ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IzrazParser$stack.elementAt(CUP$IzrazParser$top-0)).right, RESULT);
            }
          return CUP$IzrazParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

