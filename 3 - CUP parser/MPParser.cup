// import sekcija

import java_cup.runtime.*;
import java.io.*;

parser code {:
   public static void main( String[] args ) {
      try {
		   FileReader file = new FileReader(args[0]);
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
         System.out.println("Syntax analysis done.");
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }
:};


// Terminali
terminal MAIN, LEFTPAR, RIGHTPAR, LEFTBRACKET, RIGHTBRACKET, SEMICOLON, CASE;
terminal ID, COMMA, INT, CHAR, FLOAT, ASSIGN, WHEN, CONST, COLON, PLUS, MINUS;

// Neterminali
non terminal Program;
non terminal Block;
non terminal Declarations;
non terminal StatementList;
non terminal VarDecl;
non terminal Type;
non terminal NameList;
non terminal Statement;
non terminal CaseStatement;
non terminal Expression;
non terminal WhenStatementList;
non terminal WhenStatement;
non terminal Term;
non terminal AddOperator;

// Prioritet i asocijativnost operatora
// precedence left LEFTBRACKET, RIGHTBRACKET;
// precedence left LEFTPAR, RIGHTPAR;
// precedence left PLUS, MINUS;
// precedence left INT, ID;
// precedence left FLOAT, ID;
// precedence left CHAR, ID;
// precedence left ID, SEMICOLON;
// precedence left COMMA, SEMICOLON;

// Gramatika
Program ::= MAIN LEFTPAR RIGHTPAR Block
			{:
            System.out.println( "Program -> main ( ) Block" );
         :};


Block ::= LEFTBRACKET Declarations StatementList RIGHTBRACKET
			{:
            System.out.println( "Block -> { Declarations StatementList }" );
         :};

Declarations ::= Declarations VarDecl
			{:
               System.out.println( "Declarations -> Declarations VarDecl" );
         :}
         |
         {:
               System.out.println( "Declarations -> Îµ" );
         :};

VarDecl ::= Type NameList SEMICOLON
			{:
               System.out.println( "VarDecl -> Type NameList ;" );
         :};

NameList ::= ID
		   {:
            System.out.println( "NameList -> ID" );
         :}
         | NameList COMMA ID
         {:
            System.out.println( "NameList -> NameList , ID" );
         :};

Type ::= INT
		{:
         System.out.println( "Type -> int" );
      :}
		| CHAR
		{:
         System.out.println( "Type -> char" );
      :}
      | FLOAT
      {:
         System.out.println( "Type -> float" );
      :};

StatementList ::= StatementList Statement
		{:
         System.out.println( "StatementList -> StatementList Statement" );
      :}
		| Statement
		{:
         System.out.println( "StatementList -> Statement" );
      :};

Statement ::= CaseStatement
		{:
         System.out.println( "Statement -> CaseStatement" );
      :}
      | ID ASSIGN Expression SEMICOLON
      {:
         System.out.println( "Statement -> ID = Expression ;" );
      :}
      | Block
      {:
         System.out.println( "Statement -> Block" );
      :};

CaseStatement ::= CASE LEFTPAR Expression RIGHTPAR LEFTBRACKET WhenStatementList RIGHTBRACKET
   {:
      System.out.println( "CaseStatement -> case ( Expression ) { WhenStatementList }" );
   :};

WhenStatementList ::= WhenStatementList WhenStatement
	{:
      System.out.println( "WhenStatementList -> WhenStatementList WhenStatement" );
   :}
	| WhenStatement
	{:
      System.out.println( "WhenStatementList -> WhenStatement" );
   :};

WhenStatement ::= WHEN CONST COLON Statement
	{:
      System.out.println( "WhenStatement -> when CONST : Statement" );
   :};

Expression ::= Expression AddOperator Term
	{:
      System.out.println( "Expression -> Expression AddOperator Term" );
   :}
   | Term
   {:
      System.out.println( "Expression -> Term" );
   :};

AddOperator ::= PLUS
   {:
      System.out.println( "AddOperator -> +" );
   :}
   | MINUS
   {:
      System.out.println( "AddOperator -> -" );
   :};

Term ::= ID
   {:
      System.out.println( "Term -> ID" );
   :}
   | CONST
   {:
      System.out.println( "Term -> CONST" );
   :}
   | LEFTPAR Expression RIGHTPAR
   {:
      System.out.println( "Term -> ( Expression )" );
   :};