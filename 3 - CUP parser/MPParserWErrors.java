
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Dec 15 00:43:57 CET 2022
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Thu Dec 15 00:43:57 CET 2022
  */
public class MPParserWErrors extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParserWErrors() {super();}

  /** Constructor which sets the default scanner. */
  public MPParserWErrors(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\003\006\000\002\002\004\000\002\003" +
    "\006\000\002\003\005\000\002\003\004\000\002\003\003" +
    "\000\002\004\006\000\002\005\004\000\002\005\002\000" +
    "\002\007\005\000\002\007\005\000\002\011\003\000\002" +
    "\011\005\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\006\004\000\002\006\003\000\002\012\003" +
    "\000\002\012\006\000\002\012\003\000\002\013\011\000" +
    "\002\015\004\000\002\015\003\000\002\016\006\000\002" +
    "\016\005\000\002\016\004\000\002\016\003\000\002\014" +
    "\005\000\002\014\003\000\002\020\003\000\002\020\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\006\003\005\004\006\001\002\000\004\002" +
    "\076\001\002\000\004\002\ufffc\001\002\000\006\003\007" +
    "\005\010\001\002\000\004\002\ufffd\001\002\000\006\003" +
    "\012\006\011\001\002\000\006\003\014\007\013\001\002" +
    "\000\004\002\ufffe\001\002\000\016\007\ufff9\012\ufff9\013" +
    "\ufff9\015\ufff9\016\ufff9\017\ufff9\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002\000\016\007\013\012" +
    "\027\013\025\015\020\016\031\017\030\001\002\000\004" +
    "\013\070\001\002\000\004\013\ufff4\001\002\000\016\003" +
    "\uffed\007\uffed\010\uffed\012\uffed\013\uffed\021\uffed\001\002" +
    "\000\012\007\013\010\066\012\027\013\025\001\002\000" +
    "\016\007\ufffa\012\ufffa\013\ufffa\015\ufffa\016\ufffa\017\ufffa" +
    "\001\002\000\012\007\ufff0\010\ufff0\012\ufff0\013\ufff0\001" +
    "\002\000\004\020\063\001\002\000\016\003\uffef\007\uffef" +
    "\010\uffef\012\uffef\013\uffef\021\uffef\001\002\000\004\005" +
    "\032\001\002\000\004\013\ufff2\001\002\000\004\013\ufff3" +
    "\001\002\000\010\005\037\013\034\022\033\001\002\000" +
    "\012\006\uffe0\011\uffe0\024\uffe0\025\uffe0\001\002\000\012" +
    "\006\uffe1\011\uffe1\024\uffe1\025\uffe1\001\002\000\012\006" +
    "\uffe4\011\uffe4\024\uffe4\025\uffe4\001\002\000\010\006\046" +
    "\024\043\025\044\001\002\000\010\005\037\013\034\022" +
    "\033\001\002\000\010\006\041\024\043\025\044\001\002" +
    "\000\012\006\uffdf\011\uffdf\024\uffdf\025\uffdf\001\002\000" +
    "\010\005\037\013\034\022\033\001\002\000\010\005\uffe3" +
    "\013\uffe3\022\uffe3\001\002\000\010\005\uffe2\013\uffe2\022" +
    "\uffe2\001\002\000\012\006\uffe5\011\uffe5\024\uffe5\025\uffe5" +
    "\001\002\000\004\007\047\001\002\000\006\003\051\021" +
    "\053\001\002\000\010\003\uffea\010\uffea\021\uffea\001\002" +
    "\000\010\003\uffe6\010\uffe6\021\uffe6\001\002\000\010\003" +
    "\051\010\061\021\053\001\002\000\006\003\055\022\054" +
    "\001\002\000\006\003\056\023\057\001\002\000\010\003" +
    "\uffe7\010\uffe7\021\uffe7\001\002\000\010\003\uffe8\010\uffe8" +
    "\021\uffe8\001\002\000\010\007\013\012\027\013\025\001" +
    "\002\000\010\003\uffe9\010\uffe9\021\uffe9\001\002\000\016" +
    "\003\uffec\007\uffec\010\uffec\012\uffec\013\uffec\021\uffec\001" +
    "\002\000\010\003\uffeb\010\uffeb\021\uffeb\001\002\000\010" +
    "\005\037\013\034\022\033\001\002\000\010\011\065\024" +
    "\043\025\044\001\002\000\016\003\uffee\007\uffee\010\uffee" +
    "\012\uffee\013\uffee\021\uffee\001\002\000\020\002\ufffb\003" +
    "\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\021\ufffb\001\002" +
    "\000\012\007\ufff1\010\ufff1\012\ufff1\013\ufff1\001\002\000" +
    "\010\003\ufff6\011\ufff6\014\ufff6\001\002\000\010\003\074" +
    "\011\073\014\072\001\002\000\004\013\075\001\002\000" +
    "\016\007\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\001\002\000\016\007\ufff7\012\ufff7\013\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\001\002\000\010\003\ufff5\011\ufff5\014\ufff5" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\014\001\001\000\002\001\001\000" +
    "\004\005\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\020\006\021\007\022\010\016\012\023\013" +
    "\025\001\001\000\004\011\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\020\012\066\013\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\035\017\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\041\001\001\000\006\014\037\017\034\001\001\000\004" +
    "\020\041\001\001\000\002\001\001\000\004\017\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\051\016\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\020\012\057\013\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\063\017\034\001\001\000\004\020\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParserWErrors$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParserWErrors$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParserWErrors$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public int errCount = 0;
   public static void main( String[] args ) {
		String in="D:\\Desktop\\compiler\\3 - CUP parser\\testinput_w_errors.txt";
      try {
		   FileReader file = new FileReader(in);
		   Scanner scanner = new MPLexer( file );
		   MPParserWErrors parser = new MPParserWErrors( scanner );
		   parser.parse();
	  		if (parser.errCount == 0)
				System.out.println("Syntax analysis done. No errors encountered.");
			else
				System.out.println("Syntax analysis done. Error count: " + parser.errCount);
   }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }
   public void syntax_error(Symbol cur_token) {
   	  
   }
   
   public void report_error(String message, Object info) {
   	   System.out.print( message );
   }
   
   public int getLine() {
   	  return (( MPLexer) getScanner()).getLine();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParserWErrors$actions {
  private final MPParserWErrors parser;

  /** Constructor */
  CUP$MPParserWErrors$actions(MPParserWErrors parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParserWErrors$do_action(
    int                        CUP$MPParserWErrors$act_num,
    java_cup.runtime.lr_parser CUP$MPParserWErrors$parser,
    java.util.Stack            CUP$MPParserWErrors$stack,
    int                        CUP$MPParserWErrors$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParserWErrors$result;

      /* select the action based on the action number */
      switch (CUP$MPParserWErrors$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Term ::= LEFTPAR Expression RIGHTPAR 
            {
              Object RESULT = null;
		
      System.out.println( "Term -> ( Expression )" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Term ::= CONST 
            {
              Object RESULT = null;
		
      System.out.println( "Term -> CONST" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Term ::= ID 
            {
              Object RESULT = null;
		
      System.out.println( "Term -> ID" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AddOperator ::= MINUS 
            {
              Object RESULT = null;
		
      System.out.println( "AddOperator -> -" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(14/*AddOperator*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AddOperator ::= PLUS 
            {
              Object RESULT = null;
		
      System.out.println( "AddOperator -> +" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(14/*AddOperator*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expression ::= Term 
            {
              Object RESULT = null;
		
      System.out.println( "Expression -> Term" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expression ::= Expression AddOperator Term 
            {
              Object RESULT = null;
		
      System.out.println( "Expression -> Expression AddOperator Term" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // WhenStatement ::= error 
            {
              Object RESULT = null;
		
      System.out.println("Missing when keyword in when statement");
      parser.errCount++;
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(12/*WhenStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // WhenStatement ::= WHEN error 
            {
              Object RESULT = null;
		
      System.out.println("Missing constant in case statement");
      parser.errCount++;
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(12/*WhenStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // WhenStatement ::= WHEN CONST error 
            {
              Object RESULT = null;
		
      System.out.println("Missing ; in case statement");
      parser.errCount++;
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(12/*WhenStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // WhenStatement ::= WHEN CONST COLON Statement 
            {
              Object RESULT = null;
		
      System.out.println( "WhenStatement -> when CONST : Statement" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(12/*WhenStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // WhenStatementList ::= WhenStatement 
            {
              Object RESULT = null;
		
      System.out.println( "WhenStatementList -> WhenStatement" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(11/*WhenStatementList*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // WhenStatementList ::= WhenStatementList WhenStatement 
            {
              Object RESULT = null;
		
      System.out.println( "WhenStatementList -> WhenStatementList WhenStatement" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(11/*WhenStatementList*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CaseStatement ::= CASE LEFTPAR Expression RIGHTPAR LEFTBRACKET WhenStatementList RIGHTBRACKET 
            {
              Object RESULT = null;
		
      System.out.println( "CaseStatement -> case ( Expression ) { WhenStatementList }" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(9/*CaseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= Block 
            {
              Object RESULT = null;
		
         System.out.println( "Statement -> Block" );
      
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              Object RESULT = null;
		
         System.out.println( "Statement -> ID = Expression ;" );
      
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= CaseStatement 
            {
              Object RESULT = null;
		
         System.out.println( "Statement -> CaseStatement" );
      
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // StatementList ::= Statement 
            {
              Object RESULT = null;
		
               System.out.println( "StatementList -> Statement" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;
		
               System.out.println( "StatementList -> StatementList Statement" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= FLOAT 
            {
              Object RESULT = null;
		
               System.out.println( "Type -> float" );
      
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= CHAR 
            {
              Object RESULT = null;
		
               System.out.println( "Type -> char" );
            
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= INT 
            {
              Object RESULT = null;
		
               System.out.println( "Type -> int" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NameList ::= NameList COMMA ID 
            {
              Object RESULT = null;
		
            System.out.println( "NameList -> NameList , ID" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NameList ::= ID 
            {
              Object RESULT = null;
		
            System.out.println( "NameList -> ID" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecl ::= Type NameList error 
            {
              Object RESULT = null;
		
            System.out.println("Missing ; after variable declaration");
            parser.errCount++;
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= Type NameList SEMICOLON 
            {
              Object RESULT = null;
		
               System.out.println( "VarDecl -> Type NameList ;" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declarations ::= 
            {
              Object RESULT = null;
		
               System.out.println( "Declarations -> Îµ" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declarations ::= Declarations VarDecl 
            {
              Object RESULT = null;
		
               System.out.println( "Declarations -> Declarations VarDecl" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= LEFTBRACKET Declarations StatementList RIGHTBRACKET 
            {
              Object RESULT = null;
		
            System.out.println( "Block -> { Declarations StatementList }" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= error 
            {
              Object RESULT = null;
		
            System.out.println("Missing main at start of program");
            parser.errCount++;
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= MAIN error 
            {
              Object RESULT = null;
		
            System.out.println("Missing ( after main");
            parser.errCount++;
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= MAIN LEFTPAR error 
            {
              Object RESULT = null;
		
            System.out.println("Missing ) after main");
            parser.errCount++;
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MAIN LEFTPAR RIGHTPAR error 
            {
              Object RESULT = null;
		
            System.out.println("Missing block in main program");
            parser.errCount++;
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).value;
		RESULT = start_val;
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParserWErrors$parser.done_parsing();
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN LEFTPAR RIGHTPAR Block 
            {
              Object RESULT = null;
		
            System.out.println( "Program -> main ( ) Block" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

