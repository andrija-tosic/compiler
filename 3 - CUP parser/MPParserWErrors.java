
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Dec 16 11:50:59 CET 2022
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Fri Dec 16 11:50:59 CET 2022
  */
public class MPParserWErrors extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParserWErrors() {super();}

  /** Constructor which sets the default scanner. */
  public MPParserWErrors(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\003\006\000\002\002\004\000\002\003" +
    "\005\000\002\003\004\000\002\003\003\000\002\003\006" +
    "\000\002\004\006\000\002\004\006\000\002\005\004\000" +
    "\002\005\002\000\002\007\005\000\002\007\005\000\002" +
    "\007\004\000\002\011\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\004\000\002\011\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\006\004\000" +
    "\002\006\003\000\002\012\003\000\002\012\006\000\002" +
    "\012\006\000\002\012\005\000\002\012\004\000\002\012" +
    "\003\000\002\013\011\000\002\013\011\000\002\013\010" +
    "\000\002\013\007\000\002\013\006\000\002\013\005\000" +
    "\002\013\004\000\002\015\004\000\002\015\003\000\002" +
    "\016\006\000\002\016\006\000\002\016\005\000\002\016" +
    "\004\000\002\014\005\000\002\014\003\000\002\020\003" +
    "\000\002\020\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\006\003\005\004\006\001\002\000\004\002" +
    "\112\001\002\000\004\002\ufffd\001\002\000\006\003\007" +
    "\005\010\001\002\000\004\002\ufffe\001\002\000\006\003" +
    "\012\006\011\001\002\000\006\003\014\007\013\001\002" +
    "\000\004\002\uffff\001\002\000\016\007\ufff8\012\ufff8\013" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\001\002\000\004\002\ufffc" +
    "\001\002\000\004\002\001\001\002\000\016\007\013\012" +
    "\027\013\025\015\020\016\030\017\031\001\002\000\006" +
    "\003\103\013\102\001\002\000\006\003\uffef\013\uffef\001" +
    "\002\000\016\003\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5" +
    "\021\uffe5\001\002\000\014\003\100\007\013\010\077\012" +
    "\027\013\025\001\002\000\016\007\ufff9\012\ufff9\013\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\001\002\000\014\003\uffeb\007" +
    "\uffeb\010\uffeb\012\uffeb\013\uffeb\001\002\000\006\003\071" +
    "\020\072\001\002\000\016\003\uffea\007\uffea\010\uffea\012" +
    "\uffea\013\uffea\021\uffea\001\002\000\006\003\032\005\033" +
    "\001\002\000\006\003\uffee\013\uffee\001\002\000\006\003" +
    "\uffed\013\uffed\001\002\000\016\003\uffde\007\uffde\010\uffde" +
    "\012\uffde\013\uffde\021\uffde\001\002\000\012\003\037\005" +
    "\041\013\034\022\035\001\002\000\014\003\uffd3\006\uffd3" +
    "\011\uffd3\024\uffd3\025\uffd3\001\002\000\014\003\uffd2\006" +
    "\uffd2\011\uffd2\024\uffd2\025\uffd2\001\002\000\014\003\uffd6" +
    "\006\uffd6\011\uffd6\024\uffd6\025\uffd6\001\002\000\016\003" +
    "\uffdf\007\uffdf\010\uffdf\012\uffdf\013\uffdf\021\uffdf\001\002" +
    "\000\012\003\051\006\050\024\045\025\046\001\002\000" +
    "\010\005\041\013\034\022\035\001\002\000\010\006\043" +
    "\024\045\025\046\001\002\000\014\003\uffd1\006\uffd1\011" +
    "\uffd1\024\uffd1\025\uffd1\001\002\000\010\005\041\013\034" +
    "\022\035\001\002\000\010\005\uffd5\013\uffd5\022\uffd5\001" +
    "\002\000\010\005\uffd4\013\uffd4\022\uffd4\001\002\000\014" +
    "\003\uffd7\006\uffd7\011\uffd7\024\uffd7\025\uffd7\001\002\000" +
    "\006\003\053\007\052\001\002\000\016\003\uffe0\007\uffe0" +
    "\010\uffe0\012\uffe0\013\uffe0\021\uffe0\001\002\000\006\003" +
    "\054\021\057\001\002\000\016\003\uffe1\007\uffe1\010\uffe1" +
    "\012\uffe1\013\uffe1\021\uffe1\001\002\000\016\003\uffe2\007" +
    "\uffe2\010\uffe2\012\uffe2\013\uffe2\021\uffe2\001\002\000\010" +
    "\003\uffdc\010\uffdc\021\uffdc\001\002\000\010\003\070\010" +
    "\066\021\057\001\002\000\006\003\061\022\060\001\002" +
    "\000\006\003\062\023\063\001\002\000\010\003\uffd8\010" +
    "\uffd8\021\uffd8\001\002\000\010\003\uffd9\010\uffd9\021\uffd9" +
    "\001\002\000\012\003\064\007\013\012\027\013\025\001" +
    "\002\000\010\003\uffda\010\uffda\021\uffda\001\002\000\010" +
    "\003\uffdb\010\uffdb\021\uffdb\001\002\000\016\003\uffe4\007" +
    "\uffe4\010\uffe4\012\uffe4\013\uffe4\021\uffe4\001\002\000\010" +
    "\003\uffdd\010\uffdd\021\uffdd\001\002\000\016\003\uffe3\007" +
    "\uffe3\010\uffe3\012\uffe3\013\uffe3\021\uffe3\001\002\000\016" +
    "\003\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6\021\uffe6\001" +
    "\002\000\012\003\073\005\041\013\034\022\035\001\002" +
    "\000\016\003\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\021" +
    "\uffe7\001\002\000\012\003\076\011\075\024\045\025\046" +
    "\001\002\000\016\003\uffe9\007\uffe9\010\uffe9\012\uffe9\013" +
    "\uffe9\021\uffe9\001\002\000\016\003\uffe8\007\uffe8\010\uffe8" +
    "\012\uffe8\013\uffe8\021\uffe8\001\002\000\020\002\ufffb\003" +
    "\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\021\ufffb\001\002" +
    "\000\020\002\ufffa\003\ufffa\007\ufffa\010\ufffa\012\ufffa\013" +
    "\ufffa\021\ufffa\001\002\000\014\003\uffec\007\uffec\010\uffec" +
    "\012\uffec\013\uffec\001\002\000\010\003\ufff4\011\ufff4\014" +
    "\ufff4\001\002\000\024\003\ufff0\007\ufff5\011\ufff0\012\ufff5" +
    "\013\ufff5\014\ufff0\015\ufff5\016\ufff5\017\ufff5\001\002\000" +
    "\010\003\107\011\106\014\105\001\002\000\006\003\111" +
    "\013\110\001\002\000\016\007\ufff7\012\ufff7\013\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\001\002\000\024\003\ufff1\007\ufff6" +
    "\011\ufff1\012\ufff6\013\ufff6\014\ufff1\015\ufff6\016\ufff6\017" +
    "\ufff6\001\002\000\010\003\ufff3\011\ufff3\014\ufff3\001\002" +
    "\000\010\003\ufff2\011\ufff2\014\ufff2\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\014\001\001\000\002\001\001\000" +
    "\004\005\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\020\006\021\007\022\010\016\012\023\013" +
    "\025\001\001\000\004\011\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\020\012\100\013\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\037\017\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\043\001\001\000\006" +
    "\014\041\017\035\001\001\000\004\020\043\001\001\000" +
    "\002\001\001\000\004\017\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\055\016\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\020\012\064\013" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\073\017\035\001\001\000\002\001\001" +
    "\000\004\020\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParserWErrors$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParserWErrors$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParserWErrors$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public int errCount = 0;
   public static void main( String[] args ) {
      try {
		   FileReader file = new FileReader(args[0]);
		   Scanner scanner = new MPLexer( file );
		   MPParserWErrors parser = new MPParserWErrors( scanner );
		   parser.parse();
	  		if (parser.errCount == 0)
				System.out.println("Syntax analysis done. No errors encountered.");
			else
				System.out.println("Syntax analysis done. Error count: " + parser.errCount);
   }
	catch( Exception e ) {
	   e.printStackTrace();
	}
   }
   public void syntax_error(Symbol cur_token) {
   	  
   }
   
   public void report_error(String message, Object info) {
   	   System.out.print( message );
   }
   
   public int getLine() {
   	  return (( MPLexer) getScanner()).getLine();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParserWErrors$actions {
  private final MPParserWErrors parser;

  /** Constructor */
  CUP$MPParserWErrors$actions(MPParserWErrors parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParserWErrors$do_action(
    int                        CUP$MPParserWErrors$act_num,
    java_cup.runtime.lr_parser CUP$MPParserWErrors$parser,
    java.util.Stack            CUP$MPParserWErrors$stack,
    int                        CUP$MPParserWErrors$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParserWErrors$result;

      /* select the action based on the action number */
      switch (CUP$MPParserWErrors$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Term ::= LEFTPAR Expression RIGHTPAR 
            {
              Object RESULT = null;
		
      System.out.println( "Term -> ( Expression )" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Term ::= CONST 
            {
              Object RESULT = null;
		
      System.out.println( "Term -> CONST" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Term ::= ID 
            {
              Object RESULT = null;
		
      System.out.println( "Term -> ID" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AddOperator ::= MINUS 
            {
              Object RESULT = null;
		
      System.out.println( "AddOperator -> -" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(14/*AddOperator*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AddOperator ::= PLUS 
            {
              Object RESULT = null;
		
      System.out.println( "AddOperator -> +" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(14/*AddOperator*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= Term 
            {
              Object RESULT = null;
		
      System.out.println( "Expression -> Term" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= Expression AddOperator Term 
            {
              Object RESULT = null;
		
      System.out.println( "Expression -> Expression AddOperator Term" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // WhenStatement ::= WHEN error 
            {
              Object RESULT = null;
		
      System.out.println("Missing constant in case statement");
      parser.errCount++;
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(12/*WhenStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // WhenStatement ::= WHEN CONST error 
            {
              Object RESULT = null;
		
      System.out.println("Missing : in case statement");
      parser.errCount++;
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(12/*WhenStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // WhenStatement ::= WHEN CONST COLON error 
            {
              Object RESULT = null;
		
      System.out.println("Missing statement after when keyword");
      parser.errCount++;
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(12/*WhenStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // WhenStatement ::= WHEN CONST COLON Statement 
            {
              Object RESULT = null;
		
      System.out.println( "WhenStatement -> when CONST : Statement" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(12/*WhenStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // WhenStatementList ::= WhenStatement 
            {
              Object RESULT = null;
		
      System.out.println( "WhenStatementList -> WhenStatement" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(11/*WhenStatementList*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // WhenStatementList ::= WhenStatementList WhenStatement 
            {
              Object RESULT = null;
		
      System.out.println( "WhenStatementList -> WhenStatementList WhenStatement" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(11/*WhenStatementList*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CaseStatement ::= CASE error 
            {
              Object RESULT = null;
		
      System.out.println("Missing ( in case statement");
      parser.errCount++;
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(9/*CaseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CaseStatement ::= CASE LEFTPAR error 
            {
              Object RESULT = null;
		
      System.out.println("Missing expression in case statement");
      parser.errCount++;
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(9/*CaseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CaseStatement ::= CASE LEFTPAR Expression error 
            {
              Object RESULT = null;
		
      System.out.println("Missing ) in case statement");
      parser.errCount++;
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(9/*CaseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CaseStatement ::= CASE LEFTPAR Expression RIGHTPAR error 
            {
              Object RESULT = null;
		
      System.out.println("Missing { in case statement");
      parser.errCount++;
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(9/*CaseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CaseStatement ::= CASE LEFTPAR Expression RIGHTPAR LEFTBRACKET error 
            {
              Object RESULT = null;
		
      System.out.println("Error in when statements");
      parser.errCount++;
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(9/*CaseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CaseStatement ::= CASE LEFTPAR Expression RIGHTPAR LEFTBRACKET WhenStatementList error 
            {
              Object RESULT = null;
		
      System.out.println("Missing } in case statement");
      parser.errCount++;
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(9/*CaseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CaseStatement ::= CASE LEFTPAR Expression RIGHTPAR LEFTBRACKET WhenStatementList RIGHTBRACKET 
            {
              Object RESULT = null;
		
      System.out.println( "CaseStatement -> case ( Expression ) { WhenStatementList }" );
   
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(9/*CaseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= Block 
            {
              Object RESULT = null;
		
         System.out.println( "Statement -> Block" );
      
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= ID error 
            {
              Object RESULT = null;
		
         System.out.println("Missing = in assignment");
         parser.errCount++;
      
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= ID ASSIGN error 
            {
              Object RESULT = null;
		
         System.out.println("Invalid assignment value in assignment");
         parser.errCount++;
      
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= ID ASSIGN Expression error 
            {
              Object RESULT = null;
		
         System.out.println("Missing ; in assignment");
         parser.errCount++;
      
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              Object RESULT = null;
		
         System.out.println( "Statement -> ID = Expression ;" );
      
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= CaseStatement 
            {
              Object RESULT = null;
		
         System.out.println( "Statement -> CaseStatement" );
      
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // StatementList ::= Statement 
            {
              Object RESULT = null;
		
         System.out.println( "StatementList -> Statement" );
      
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;
		
         System.out.println( "StatementList -> StatementList Statement" );
      
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= FLOAT 
            {
              Object RESULT = null;
		
         System.out.println( "Type -> float" );
      
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= CHAR 
            {
              Object RESULT = null;
		
         System.out.println( "Type -> char" );
      
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= INT 
            {
              Object RESULT = null;
		
         System.out.println( "Type -> int" );
      
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NameList ::= error 
            {
              Object RESULT = null;
		
            System.out.println("Error in variable declaration");
            parser.errCount++;
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NameList ::= NameList error 
            {
              Object RESULT = null;
		
            System.out.println("Missing , after name list");
            parser.errCount++;
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NameList ::= NameList COMMA error 
            {
              Object RESULT = null;
		
            System.out.println("Missing identificator in name list");
            parser.errCount++;
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NameList ::= NameList COMMA ID 
            {
              Object RESULT = null;
		
            System.out.println( "NameList -> NameList , ID" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NameList ::= ID 
            {
              Object RESULT = null;
		
            System.out.println( "NameList -> ID" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarDecl ::= Type error 
            {
              Object RESULT = null;
		
            System.out.println("Error in name list in variable declaration");
            parser.errCount++;
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= Type NameList error 
            {
              Object RESULT = null;
		
            System.out.println("Missing ; after variable declaration");
            parser.errCount++;
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecl ::= Type NameList SEMICOLON 
            {
              Object RESULT = null;
		
               System.out.println( "VarDecl -> Type NameList ;" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declarations ::= 
            {
              Object RESULT = null;
		
               System.out.println( "Declarations -> Îµ" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declarations ::= Declarations VarDecl 
            {
              Object RESULT = null;
		
               System.out.println( "Declarations -> Declarations VarDecl" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Block ::= LEFTBRACKET Declarations StatementList error 
            {
              Object RESULT = null;
		
            System.out.println("Missing } at end of block");
            parser.errCount++;
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= LEFTBRACKET Declarations StatementList RIGHTBRACKET 
            {
              Object RESULT = null;
		
            System.out.println( "Block -> { Declarations StatementList }" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= MAIN LEFTPAR RIGHTPAR error 
            {
              Object RESULT = null;
		
            System.out.println("Error in block in main program");
            parser.errCount++;
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= error 
            {
              Object RESULT = null;
		
            System.out.println("Missing main at start of program");
            parser.errCount++;
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= MAIN error 
            {
              Object RESULT = null;
		
            System.out.println("Missing ( after main");
            parser.errCount++;
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MAIN LEFTPAR error 
            {
              Object RESULT = null;
		
            System.out.println("Missing ) after main");
            parser.errCount++;
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).value;
		RESULT = start_val;
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParserWErrors$parser.done_parsing();
          return CUP$MPParserWErrors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN LEFTPAR RIGHTPAR Block 
            {
              Object RESULT = null;
		
            System.out.println( "Program -> main ( ) Block" );
         
              CUP$MPParserWErrors$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWErrors$stack.elementAt(CUP$MPParserWErrors$top-0)).right, RESULT);
            }
          return CUP$MPParserWErrors$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

