
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Dec 08 11:55:10 CET 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Wed Dec 08 11:55:10 CET 2021
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\003\012\000\002\002\004\000\002\003" +
    "\012\000\002\003\011\000\002\003\010\000\002\003\007" +
    "\000\002\003\006\000\002\003\005\000\002\003\004\000" +
    "\002\003\003\000\002\005\004\000\002\005\004\000\002" +
    "\007\004\000\002\007\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\004\000\002\004\005\000\002\004\005" +
    "\000\002\004\003\000\002\011\003\000\002\011\003\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\006\000" +
    "\002\014\006\000\002\014\005\000\002\014\004\000\002" +
    "\015\006\000\002\015\006\000\002\015\005\000\002\015" +
    "\004\000\002\016\005\000\002\016\005\000\002\016\004" +
    "\000\002\017\005\000\002\017\005\000\002\017\003\000" +
    "\002\020\005\000\002\020\005\000\002\020\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\005\000\002\021" +
    "\005\000\002\021\004\000\002\022\010\000\002\022\010" +
    "\000\002\022\007\000\002\022\006\000\002\022\005\000" +
    "\002\022\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\006\003\005\004\006\001\002\000\004\002" +
    "\141\001\002\000\004\002\ufff8\001\002\000\006\003\007" +
    "\023\010\001\002\000\004\002\ufff9\001\002\000\006\003" +
    "\012\017\011\001\002\000\012\003\uffee\024\uffee\025\uffee" +
    "\030\uffee\001\002\000\004\002\ufffa\001\002\000\010\003" +
    "\016\024\015\030\014\001\002\000\006\003\140\017\137" +
    "\001\002\000\006\003\017\027\020\001\002\000\004\002" +
    "\ufffb\001\002\000\004\002\ufffc\001\002\000\006\003\022" +
    "\005\021\001\002\000\006\003\124\017\011\001\002\000" +
    "\004\002\ufffd\001\002\000\006\003\025\010\026\001\002" +
    "\000\006\003\122\031\123\001\002\000\004\002\ufffe\001" +
    "\002\000\016\003\040\010\026\012\027\013\041\014\036" +
    "\017\037\001\002\000\006\003\114\023\115\001\002\000" +
    "\012\003\uffe2\011\uffe2\016\uffe2\027\uffe2\001\002\000\010" +
    "\003\uffe5\011\uffe5\027\uffe5\001\002\000\012\003\uffe4\011" +
    "\uffe4\016\uffe4\027\uffe4\001\002\000\012\003\uffe3\011\uffe3" +
    "\016\uffe3\027\uffe3\001\002\000\010\003\106\011\110\027" +
    "\107\001\002\000\012\003\uffe0\011\uffe0\016\uffe0\027\uffe0" +
    "\001\002\000\012\003\074\017\046\020\045\023\053\001" +
    "\002\000\006\003\070\026\071\001\002\000\014\003\uffe9" +
    "\011\uffe9\016\uffe9\027\uffe9\031\uffe9\001\002\000\006\003" +
    "\043\023\044\001\002\000\012\003\uffe1\011\uffe1\016\uffe1" +
    "\027\uffe1\001\002\000\012\003\uffd8\011\uffd8\016\uffd8\027" +
    "\uffd8\001\002\000\012\003\050\017\046\020\045\023\053" +
    "\001\002\000\022\003\uffcd\011\uffcd\015\uffcd\016\uffcd\021" +
    "\uffcd\022\uffcd\024\uffcd\027\uffcd\001\002\000\022\003\uffce" +
    "\011\uffce\015\uffce\016\uffce\021\uffce\022\uffce\024\uffce\027" +
    "\uffce\001\002\000\022\003\uffcf\011\uffcf\015\uffcf\016\uffcf" +
    "\021\uffcf\022\uffcf\024\uffcf\027\uffcf\001\002\000\012\003" +
    "\uffd9\011\uffd9\016\uffd9\027\uffd9\001\002\000\022\003\uffd2" +
    "\011\uffd2\015\uffd2\016\uffd2\021\uffd2\022\063\024\uffd2\027" +
    "\uffd2\001\002\000\010\003\067\021\060\024\066\001\002" +
    "\000\012\003\054\017\046\020\045\023\053\001\002\000" +
    "\022\003\uffca\011\uffca\015\uffca\016\uffca\021\uffca\022\uffca" +
    "\024\uffca\027\uffca\001\002\000\010\003\057\021\060\024" +
    "\056\001\002\000\022\003\uffcc\011\uffcc\015\uffcc\016\uffcc" +
    "\021\uffcc\022\uffcc\024\uffcc\027\uffcc\001\002\000\022\003" +
    "\uffcb\011\uffcb\015\uffcb\016\uffcb\021\uffcb\022\uffcb\024\uffcb" +
    "\027\uffcb\001\002\000\012\003\061\017\046\020\045\023" +
    "\053\001\002\000\020\003\uffd3\011\uffd3\015\uffd3\016\uffd3" +
    "\021\uffd3\024\uffd3\027\uffd3\001\002\000\022\003\uffd4\011" +
    "\uffd4\015\uffd4\016\uffd4\021\uffd4\022\063\024\uffd4\027\uffd4" +
    "\001\002\000\012\003\065\017\046\020\045\023\053\001" +
    "\002\000\022\003\uffd1\011\uffd1\015\uffd1\016\uffd1\021\uffd1" +
    "\022\uffd1\024\uffd1\027\uffd1\001\002\000\022\003\uffd0\011" +
    "\uffd0\015\uffd0\016\uffd0\021\uffd0\022\uffd0\024\uffd0\027\uffd0" +
    "\001\002\000\012\003\uffdb\011\uffdb\016\uffdb\027\uffdb\001" +
    "\002\000\012\003\uffda\011\uffda\016\uffda\027\uffda\001\002" +
    "\000\012\003\uffd5\011\uffd5\016\uffd5\027\uffd5\001\002\000" +
    "\012\003\072\017\046\020\045\023\053\001\002\000\012" +
    "\003\uffd6\011\uffd6\016\uffd6\027\uffd6\001\002\000\014\003" +
    "\uffd7\011\uffd7\016\uffd7\021\060\027\uffd7\001\002\000\012" +
    "\003\uffc4\011\uffc4\016\uffc4\027\uffc4\001\002\000\010\003" +
    "\076\015\077\021\060\001\002\000\012\003\uffc5\011\uffc5" +
    "\016\uffc5\027\uffc5\001\002\000\016\003\101\010\026\012" +
    "\027\013\041\014\036\017\037\001\002\000\006\003\102" +
    "\016\103\001\002\000\012\003\uffc6\011\uffc6\016\uffc6\027" +
    "\uffc6\001\002\000\012\003\uffc7\011\uffc7\016\uffc7\027\uffc7" +
    "\001\002\000\016\003\105\010\026\012\027\013\041\014" +
    "\036\017\037\001\002\000\012\003\uffc9\011\uffc9\016\uffc9" +
    "\027\uffc9\001\002\000\012\003\uffc8\011\uffc8\016\uffc8\027" +
    "\uffc8\001\002\000\026\003\uffea\010\026\011\uffea\012\027" +
    "\013\041\014\036\016\uffea\017\037\027\uffea\031\uffea\001" +
    "\002\000\016\003\112\010\026\012\027\013\041\014\036" +
    "\017\037\001\002\000\014\003\uffeb\011\uffeb\016\uffeb\027" +
    "\uffeb\031\uffeb\001\002\000\010\003\uffe8\011\uffe8\027\uffe8" +
    "\001\002\000\010\003\uffe7\011\uffe7\027\uffe7\001\002\000" +
    "\010\003\uffe6\011\uffe6\027\uffe6\001\002\000\012\003\uffdc" +
    "\011\uffdc\016\uffdc\027\uffdc\001\002\000\006\003\117\017" +
    "\116\001\002\000\006\003\121\024\120\001\002\000\012" +
    "\003\uffdd\011\uffdd\016\uffdd\027\uffdd\001\002\000\012\003" +
    "\uffdf\011\uffdf\016\uffdf\027\uffdf\001\002\000\012\003\uffde" +
    "\011\uffde\016\uffde\027\uffde\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\001\001\002\000\006\003\ufff6\010\ufff6" +
    "\001\002\000\010\003\ufff7\010\ufff7\017\011\001\002\000" +
    "\010\003\ufff4\010\ufff4\017\ufff4\001\002\000\010\003\130" +
    "\025\131\030\014\001\002\000\010\003\ufff1\010\ufff1\017" +
    "\ufff1\001\002\000\010\003\134\006\132\007\135\001\002" +
    "\000\010\003\uffed\010\uffed\017\uffed\001\002\000\010\003" +
    "\ufff3\010\ufff3\017\ufff3\001\002\000\010\003\ufff2\010\ufff2" +
    "\017\ufff2\001\002\000\010\003\uffec\010\uffec\017\uffec\001" +
    "\002\000\010\003\ufff5\010\ufff5\017\ufff5\001\002\000\012" +
    "\003\ufff0\024\ufff0\025\ufff0\030\ufff0\001\002\000\012\003" +
    "\uffef\024\uffef\025\uffef\030\uffef\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\022\001\001\000" +
    "\010\004\126\007\124\010\125\001\001\000\002\001\001" +
    "\000\004\006\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\041\012\033\013\030\014\031\015\032" +
    "\016\027\022\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\074\020" +
    "\050\021\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\051\020\050\021\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\054\020\050" +
    "\021\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\061\021\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\072\020\050\021\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\041\013\077\014\031\015\032\016\027" +
    "\022\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\041\013\103\014\031\015\032" +
    "\016\027\022\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\041\013\112\014\031\015\032\016\027" +
    "\022\034\001\001\000\016\006\041\013\110\014\031\015" +
    "\032\016\027\022\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\126\010\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   public int errNo = 0;
   
   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
		   if ( parser.errNo == 0 )
		      System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
		   else
		      System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo );
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }
   
   public void syntax_error(Symbol cur_token)
   {
   	  
   }
   
   public void report_error(String message, Object info)
   {
   	   System.out.print( message );
   }
   
   public int getLine()
   {
   	  return (( MPLexer) getScanner()).getLine();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IfNar ::= IF error 
            {
              Object RESULT = null;
		
             System.out.println("Greska u liniji " + parser.getLine() + ": " + 
             	"Nedostaje '('.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*IfNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IfNar ::= IF Izraz error 
            {
              Object RESULT = null;
		
             System.out.println("Greska u liniji " + parser.getLine() + ": " + 
             	"Nedostaje kljucna rec 'then'.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*IfNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IfNar ::= IF Izraz THEN error 
            {
              Object RESULT = null;
		
             System.out.println("Greska u liniji " + parser.getLine() + ": " + 
             	"Nedostaje naredba u 'then' grani.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*IfNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IfNar ::= IF Izraz THEN Naredba error 
            {
              Object RESULT = null;
		
             System.out.println("Greska u liniji " + parser.getLine() + ": " + 
             	"Nedostaje kljucna rec 'else'.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*IfNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IfNar ::= IF Izraz THEN Naredba ELSE error 
            {
              Object RESULT = null;
		
             System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
             	"Nedostaje naredba u 'else' grani.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*IfNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IfNar ::= IF Izraz THEN Naredba ELSE Naredba 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*IfNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FIzraz ::= LEFTPAR error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": " + 
              	"Nekorektan izraz.");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*FIzraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FIzraz ::= LEFTPAR Izraz error 
            {
              Object RESULT = null;
		
              System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
              	"Nedostaje ')'.");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*FIzraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FIzraz ::= LEFTPAR Izraz RIGHTPAR 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*FIzraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FIzraz ::= CONST 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*FIzraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FIzraz ::= ID 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*FIzraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PIzraz ::= FIzraz 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*PIzraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PIzraz ::= PIzraz MUL error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": " + 
              	"Nekorektan izraz.");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*PIzraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PIzraz ::= PIzraz MUL FIzraz 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*PIzraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Izraz ::= PIzraz 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Izraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Izraz ::= Izraz PLUS error 
            {
              Object RESULT = null;
		
             System.out.println("Greska u liniji " + parser.getLine() + ": " + 
             	"Nekorektan izraz.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Izraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Izraz ::= Izraz PLUS PIzraz 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Izraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Dodela ::= ID error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": " + 
              	"Nedostaje ':='.");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Dodela*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Dodela ::= ID ASSIGN error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": " + 
              	"Nekorektan izraz.");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Dodela*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Dodela ::= ID ASSIGN Izraz 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Dodela*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Izlaz ::= WRITE error 
            {
              Object RESULT = null;
		
             System.out.println("Greska u liniji " + parser.getLine() + ": " + 
             	"Nedostaje '('.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Izlaz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Izlaz ::= WRITE LEFTPAR error 
            {
              Object RESULT = null;
		
             System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
             	"Nekorektan izraz.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Izlaz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Izlaz ::= WRITE LEFTPAR Izraz error 
            {
              Object RESULT = null;
		
             System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
             	"Nedostaje ')'.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Izlaz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Izlaz ::= WRITE LEFTPAR Izraz RIGHTPAR 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Izlaz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Ulaz ::= READ error 
            {
              Object RESULT = null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + 
            	"Nedostaje '('.");
            parser.errNo++;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Ulaz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Ulaz ::= READ LEFTPAR error 
            {
              Object RESULT = null;
		
            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
            	"Nedostaje ime promenljive.");
            parser.errNo++;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Ulaz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Ulaz ::= READ LEFTPAR ID error 
            {
              Object RESULT = null;
		
            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
            	"Nedostaje ')'.");
            parser.errNo++;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Ulaz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Ulaz ::= READ LEFTPAR ID RIGHTPAR 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Ulaz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Naredba ::= IfNar 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Naredba ::= Blok 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Naredba ::= Dodela 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Naredba ::= Izlaz 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Naredba ::= Ulaz 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NizNar ::= Naredba 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*NizNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NizNar ::= NizNar error Naredba 
            {
              Object RESULT = null;
		
              System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
              	"Nedostaje ';'." );
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*NizNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NizNar ::= NizNar SEMI error 
            {
              Object RESULT = null;
		
              System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
              	"Nedostaje naredba nakon simbola ';'." );
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*NizNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NizNar ::= NizNar SEMI Naredba 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*NizNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Blok ::= BEGIN error 
            {
              Object RESULT = null;
		
         	System.out.println("Greska u liniji " + parser.getLine() + ": " + 
         		"Telo bloka je nekorektno");
            parser.errNo++;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Blok*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Blok ::= BEGIN NizNar error 
            {
              Object RESULT = null;
		
         	System.out.println("Greska u liniji " + parser.getLine() + ": " + 
         		"Nezavrsen blok (nedostaje kljucna rec 'end').");
            parser.errNo++;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Blok*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Blok ::= BEGIN NizNar END 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Blok*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tip ::= CHAR 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Tip*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tip ::= INTEGER 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Tip*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NizImena ::= ID 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*NizImena*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NizImena ::= NizImena COMMA error 
            {
              Object RESULT = null;
		
             	System.out.println("Greska u liniji " + parser.getLine() + ": " + 
             		"Nedostaje ime promenljive nakon simbola ','" );
            	parser.errNo++;
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*NizImena*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NizImena ::= NizImena COMMA ID 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*NizImena*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Deklaracija ::= NizImena error 
            {
              Object RESULT = null;
		
                   System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                   		"Nedostaje simbol ':'." );
            		parser.errNo++;
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Deklaracija*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Deklaracija ::= NizImena COLON error 
            {
              Object RESULT = null;
		
                   System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                   		"Nekorektno ime tipa." );
            		parser.errNo++;
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Deklaracija*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Deklaracija ::= NizImena COLON Tip 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Deklaracija*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NizDekl ::= Deklaracija 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*NizDekl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NizDekl ::= NizDekl Deklaracija 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*NizDekl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DeklProm ::= VAR error 
            {
              Object RESULT = null;
		
             	System.out.println("Greska u liniji " + parser.getLine() + ": " + 
             		"Nedostaju deklaracije promenljivih nakon kljucne veci 'var'.");
            	parser.errNo++;
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*DeklProm*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeklProm ::= VAR NizDekl 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*DeklProm*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Program ::= error 
            {
              Object RESULT = null;
		
            	System.out.println("Greska u liniji " + parser.getLine() + ": " + 
            		"Nedostaje kljucna rec 'program' na pocetku.");
            	parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Program ::= PROGRAM error 
            {
              Object RESULT = null;
		
            	System.out.println("Greska u liniji " + parser.getLine() + ": " + 
            		"Nedostaje '('.");
            	parser.errNo++;
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Program ::= PROGRAM LEFTPAR error 
            {
              Object RESULT = null;
		
            	System.out.println("Greska u liniji " + parser.getLine() + ": " + 
            		"Nedostaju argumenti programa.");
            	parser.errNo++;
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Program ::= PROGRAM LEFTPAR NizImena error 
            {
              Object RESULT = null;
		
            	System.out.println("Greska u liniji " + parser.getLine() + ": " + 
            		"Nedostaje ')'.");
            	parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= PROGRAM LEFTPAR NizImena RIGHTPAR error 
            {
              Object RESULT = null;
		
            	System.out.println("Greska u liniji " + parser.getLine() + ": " + 
            		"Nedostaje ';'.");
            	parser.errNo++;
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= PROGRAM LEFTPAR NizImena RIGHTPAR SEMI error 
            {
              Object RESULT = null;
		
            	System.out.println("Greska u liniji " + parser.getLine() + ": " + 
            		"Nedostaju deklaracije promenljivih.");
            	parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= PROGRAM LEFTPAR NizImena RIGHTPAR SEMI DeklProm error 
            {
              Object RESULT = null;
		
            	System.out.println("Greska u liniji " + parser.getLine() + ": " + 
            		"Telo programa je nekorektno.");
            	parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= PROGRAM LEFTPAR NizImena RIGHTPAR SEMI DeklProm Blok error 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
               System.out.println( "Nedostaje '.' na kraju programa" );
               parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM LEFTPAR NizImena RIGHTPAR SEMI DeklProm Blok DOT 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

